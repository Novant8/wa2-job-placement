services:
  keycloak:
    build: ./keycloak-spi-kafka
    image: waii2024g07/keycloak-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '9090:8080'
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      PROXY_ADDRESS_FORWARDING: true
      KEYCLOAK_FRONTEND_URL: http://localhost:9090
      KC_HEALTH_ENABLED: true
    volumes:
      - ./ApiGateway/keycloak:/opt/keycloak/data/import
    command: start-dev --import-realm
    networks:
      - kfk-net
      - keycloak
    healthcheck:
      # Send a request to http://localhost:9090/health/ready and verify that it responds with a 200 OK
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/localhost/9000 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'" ]
      start_period: 60s
      interval: 5s
      timeout: 1s
      retries: 10

  kafka:
    image: 'bitnami/kafka:3.7'
    hostname: kafka
    volumes:
      - kafkaData:/bitnami
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - kfk-net
    healthcheck:
      test: kafka-topics.sh --bootstrap-server localhost:9092 --list
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9091:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kfk-net
    healthcheck:
      test: wget --spider -q http://localhost:8080/ || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

  api-gateway:
    build: ./ApiGateway
    image: waii2024g07/apigateway:latest
    depends_on:
      keycloak:
        condition: service_healthy
      kafka:
        condition: service_healthy
    network_mode: host
    healthcheck:
      test: wget --spider -q http://localhost:8080/ || exit 1
      start_period: 5s
      interval: 5s
      timeout: 1s
      retries: 10

  frontend:
    build: ./Frontend
    image: waii2024g07/frontend:latest
    ports:
      - "5173:5173"
    healthcheck:
      test: curl -f http://localhost:5173 || exit 1
      start_period: 1s
      interval: 5s
      timeout: 1s
      retries: 10

  crm:
    build: ./CRM
    image: waii2024g07/crm:latest
    depends_on:
      crm-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    networks:
      - crm
      - keycloak
      - prometheus
      - kfk-net
    healthcheck:
      test: wget --spider -q http://localhost:8082/actuator/health || exit 1
      start_period: 5s
      interval: 5s
      timeout: 1s
      retries: 10

  crm-db:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    volumes:
      - crmData:/var/lib/postgresql/data
    networks:
      - crm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}"]
      start_period: 1s
      interval: 5s
      timeout: 5s
      retries: 10

  comm-manager:
    build: ./CommunicationManager
    image: waii2024g07/communicationmanager:latest
    networks:
      - keycloak
      - prometheus
      - kfk-net
    ports:
      - "8083:8083"
    healthcheck:
      test: wget --spider -q http://localhost:8083/actuator/health || exit
      start_period: 20s
      interval: 5s
      timeout: 1s
      retries: 10


  document-store:
    build: ./DocumentStore
    image: waii2024g07/documentstore:latest
    depends_on:
      document-store-db:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks:
      - document-store
      - prometheus
      - kfk-net
    healthcheck:
      test: wget --spider -q http://localhost:8081/actuator/health || exit
      start_period: 20s
      interval: 5s
      timeout: 1s
      retries: 10

  document-store-db:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    volumes:
      - documentStoreData:/var/lib/postgresql/data
    networks:
      - document-store
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}" ]
      start_period: 1s
      interval: 5s
      timeout: 5s
      retries: 10

  monitoring:
    build: ./Monitoring
    image: waii2024g07/monitoring:latest
    depends_on:
      monitoring-db:
        condition: service_healthy
    networks:
      - monitoring
      - kfk-net
      - keycloak
    ports:
      - "8084:8084"
    healthcheck:
      test: bash -c ':> /dev/tcp/localhost/8084'
      start_period: 15s
      interval: 5s
      timeout: 1s
      retries: 10

  monitoring-db:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    volumes:
      - monitoringData:/var/lib/postgresql/data
    networks:
      - monitoring
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}" ]
      start_period: 1s
      interval: 5s
      timeout: 5s
      retries: 10

  prometheus:
    image: 'prom/prometheus'
    ports:
      - '9095:9090'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./Monitoring/config_prometheus_docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./Monitoring/config_prometheus_docker/web.yml:/etc/prometheus/web.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.config.file=/etc/prometheus/web.yml
    networks:
      - monitoring
      - prometheus
    healthcheck:
      test: wget --spider --server-response -q http://localhost:9090/ 2>&1 >/dev/null | grep "HTTP" || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      keycloak:
        condition: service_healthy
      prometheus:
        condition: service_started
    user: "$UID:$GID"
    ports:
      - "3000:3000"
    volumes:
      #provisioning
      - ./Monitoring/config_grafana_docker/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      #grafana config file
      - ./Monitoring/config_grafana_docker/grafana.ini:/etc/grafana/grafana.ini
      - ./Monitoring/config_grafana/grafana/:/var/lib/grafana/:rw
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - monitoring
    healthcheck:
      test: curl -f http://localhost:3000/-/health || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  crm:
    driver: bridge
  kfk-net:
    driver: bridge
  keycloak:
    driver: bridge
  document-store:
    driver: bridge
  monitoring:
    driver: bridge
  prometheus:
    driver: bridge

volumes:
  kafkaData:
  keycloakSPIKafka:
  documentStoreData:
  crmData:
  monitoringData: