package it.polito.wa2.g07.crm.integrations.lab02

import com.fasterxml.jackson.databind.ObjectMapper
import it.polito.wa2.g07.crm.CrmApplicationTests
import it.polito.wa2.g07.crm.dtos.lab02.ContactDTO
import it.polito.wa2.g07.crm.dtos.lab02.CreateContactDTO
import it.polito.wa2.g07.crm.dtos.lab02.EmailDTO
import it.polito.wa2.g07.crm.dtos.lab02.MessageCreateDTO
import it.polito.wa2.g07.crm.entities.lab02.ContactCategory
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.http.MediaType
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.get
import org.springframework.test.web.servlet.post

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK) //just to remove IDE error on mockMvc
@AutoConfigureMockMvc
class MessageContactIntegrationTest:CrmApplicationTests() {

    @Autowired
    lateinit var mockMvc: MockMvc

    @Autowired
    lateinit var objectMapper: ObjectMapper

    @Test
    fun autoDeleteAutoGeneratedContact_insertContactWithAddress() {
        val senderDTO = EmailDTO("new.mail@example.org")
        val createMessageDTO = MessageCreateDTO(
            senderDTO,
            senderDTO.addressType.name,
            "Subject",
            "Body"
        )
        val createContactDTO = CreateContactDTO(
            "Mario",
            "Rossi",
            ContactCategory.CUSTOMER.name,
            null,
            addresses = listOf(senderDTO)
        )

        // Add message from new sender
        mockMvc
            .post("/API/messages") {
                contentType = MediaType.APPLICATION_JSON
                content = objectMapper.writeValueAsString(createMessageDTO)
            }.andExpect {
                status { isCreated() }
            }

        // Pair new sender with contact
        mockMvc
            .post("/API/contacts") {
                contentType = MediaType.APPLICATION_JSON
                content = objectMapper.writeValueAsString(createContactDTO)
            }.andExpect {
                status { isCreated() }
            }

        // Verify that the address is not paired with the auto-generated contact
        mockMvc
            .get("/API/contacts") {
                queryParam("email", senderDTO.email)
            }.andExpect {
                status { isOk() }
                jsonPath("$.content") {
                    isArray()
                    isNotEmpty()
                }
                jsonPath("$.content[?(@.name == 'Auto-generated')]") { doesNotExist() }
            }
    }

    @Test
    fun autoDeleteAutoGeneratedContact_insertAddressToContact() {
        val senderDTO = EmailDTO("new.mail@example.org")
        val createMessageDTO = MessageCreateDTO(
            senderDTO,
            senderDTO.addressType.name,
            "Subject",
            "Body"
        )
        val createContactDTO = CreateContactDTO(
            "Mario",
            "Rossi",
            ContactCategory.CUSTOMER.name,
            null,
            addresses = listOf()
        )

        // Add contact
        val contactResponse =
            mockMvc
                .post("/API/contacts") {
                    contentType = MediaType.APPLICATION_JSON
                    content = objectMapper.writeValueAsString(createContactDTO)
                }.andExpect {
                    status { isCreated() }
                }.andReturn()

        // Add message from new sender
        mockMvc
            .post("/API/messages") {
                contentType = MediaType.APPLICATION_JSON
                content = objectMapper.writeValueAsString(createMessageDTO)
            }.andExpect {
                status { isCreated() }
            }

        val responseContactDTO = objectMapper.readValue(contactResponse.response.contentAsString, ContactDTO::class.java)

        // Pair sender with contact
        mockMvc
            .post("/API/contacts/${responseContactDTO.id}/email") {
                contentType = MediaType.APPLICATION_JSON
                content = objectMapper.writeValueAsString(senderDTO)
            }.andExpect {
                status { isCreated() }
            }

        // Verify that the address is not paired with the auto-generated contact
        mockMvc
            .get("/API/contacts") {
                queryParam("email", senderDTO.email)
            }.andExpect {
                status { isOk() }
                jsonPath("$.content") {
                    isArray()
                    isNotEmpty()
                }
                jsonPath("$.content[?(@.name == 'Auto-generated')]") { doesNotExist() }
            }
    }

}